mOPE:

Included is the code for the mOPE order preserving encoding scheme, created by
Raluca Ada Popa (MIT), Frank Li (UC Berkeley), and Nickolai Zeldovich (MIT).
More system details can be found in our paper "An Ideal-Security Protocol for
Order-Preserving Encoding", presented at the IEEE Symposium on Security and
Privacy 2013.

The implementation of mOPE borrows some code from the MIT CryptDB
project, in particular the crypto library in crypto/, a simpler MySQL interface
in edb/, and existing utility functions in util/. The included license applies
to both existing CryptDB code and mOPE code.

BUILD INSTRUCTIONS:

Follow instructions in doc/BUILD to build mOPE.
Run "./obj/test/test sys 64 100 0" to quickly check if the build is correct,
(errors may depend on your configurations in util/ope_conf.hh, check those first).

RUNNING/WORKING WITH THE CODE:

The strictly mOPE code base consists of ope/*, test/* udf/*, and util/ope*.

Configurations:
The configurable parameters for the mOPE scheme are all listed and described in
util/ope_conf.hh. Set as appropriate before build.

Tests/Running:
test/test_system.cc contains part of the code used to generate the experimental
results in our paper. It also serves as examples of running the mOPE code, in
particular creating a client and server. If you run the test client and server
with WITH_DB=1 (util/ope_conf.hh), it will generate a test storing values in 
default table testope on server machine, in correct OPE order. Checking the MySQL table can
confirm everything is working correctly. The other tests are not currently
configured to run with a database, but can easily be modified to do so.

UDFs:
When using mOPE with a MySQL database (assumed to be on the same machine as the
mOPE server), the server requires some interaction with the database through
user-defined functions (UDFs). These are defined in udf/edb.cc. Generally, these
do not need to be modified, unless to change the database address (currently
hardcoded). The UDFs "udftransform" and "set_udftransform" must be installed.

The remaining three UDFs are optional. They were used for a remote client to command a MySQL 
database to create the mOPE server ("create_ops_server"), find network information
about the newly started mOPE server ("get_ops_server"), and compute the ope
encryption ("ope_enc"), which abstracts away the entire protocol process. Note
that in the ope_enc case, the SQL command instructs MySQL to tell the mOPE
server to talk with the client (hence in such cases, the client must be started
first). Additional UDFs can be defined using the other UDFs as an example.
