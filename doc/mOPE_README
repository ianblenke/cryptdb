mOPE:

Included is the code for the mOPE order preserving encoding scheme, created by
Raluca Ada Popa (MIT), Frank Li (UC Berkeley), and Nickolai Zeldovich (MIT).
More details can be found in our paper "An Ideal-Security Protocol for
Order-Preserving Encoding", presented at the IEEE Symposium on Security and
Privacy 2013.

BUILD INSTRUCTIONS:

The implementation of mOPE uses the exiting code base from the MIT CryptDB
project, in particular the crypto library in crypto/, a simpler MySQL interface
in edb/, and existing utility functions in util/. The included license applies
to both existing CryptDB code and mOPE code.

Follow instructions in doc/CRYPTDB_README and doc/BUILD, which builds both 
CryptDB and mOPE together (note: mOPE is NOT currently integrated into CryptDB).
Run "./obj/test/test sys 64 100 0" to quickly check if the build is correct,
(errors may depend on your configurations in util/ope_conf.hh).


RUNNING/CHANGING THE CODE:

The code is strictly research code, and is provided as is. The purely mOPE code
base consists of ope/*, test/* udf/*, and util/ope*.

The configurable parameters for the mOPE scheme are all listed in
util/ope_conf.hh. Set as appropriate before build.

test/test_system.cc contains part of the code used to generate the experimental
results in our paper. It also serves as examples of running the mOPE code, in
particular creating a client and server. 

When using mOPE with a MySQL database (assumed to be on the same machine as the
mOPE server), the server requires some interaction with the database through
user-defined functions (UDFs). These are defined in udf/edb.cc. Generally, these
do not need to be modified, unless to change the database address (currently
hardcoded). Of use may be the UDF "create_ops_server", which is a MySQL UDF
query that will start up an mOPE server.
run.sh is a simple script that may help in installing the MySQL UDFs. Modify as 
appropriate (ex: it assumes the database name is cryptdb).
